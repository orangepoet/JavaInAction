package cn.orangepoet.inaction.algorithm;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Foo {
    // There is an array generated by a rule.
    // The first item is 1. If k is in the array, then 3k+1 and 2k+1 are in the array.
    // The array is sorted. There are no duplicate values.
    // Please write a function that accepts an input N. It should return the value at index N of the array.
    // For example [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...] n=10, return 22; n=100, return 447

    public static int findN(int n) {
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        queue.push(1);

        List<Integer> list = new ArrayList<>();
        Set<Integer> unique = new HashSet<>();

        while (!queue.isEmpty()) {
            int qn = queue.size();
            int min = Integer.MAX_VALUE;
            for (int i = 0; i < qn; i++) {
                int item = queue.poll();
                if (unique.add(item)) {
                    list.add(item);
                }
                min = Math.min(item, min);
                queue.offer(item * 2 + 1);
                queue.offer(item * 3 + 1);
            }
            if (reachEnd(list, list.size() - qn - 1, n, min)) {
                break;
            }
            Collections.sort(list);
        }
        return list.get(n);
    }

    /**
     * 是否达到终点，如果min插入数组中的位置超过N，说明新增加的数不影响数组前N排列，可以停止；
     *
     * @param list
     * @param high
     * @param n
     * @param min  新增最小的数
     * @return true：表示满足
     */
    private static boolean reachEnd(List<Integer> list, int high, int n, int min) {
        while (0 <= high) {
            int mid = high >> 1;
            if (list.get(mid) > min) {
                high = mid - 1;
            } else {
                return mid >= n;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int ans = findN(100);
        System.out.println(ans);
    }
}
