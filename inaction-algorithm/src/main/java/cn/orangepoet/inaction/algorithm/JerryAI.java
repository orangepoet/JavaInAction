package cn.orangepoet.inaction.algorithm;

import lombok.extern.slf4j.Slf4j;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;

@Slf4j
public class JerryAI {
    // There is an array generated by a rule.
    // The first item is 1. If k is in the array, then 3k+1 and 2k+1 are in the array.
    // The array is sorted. There are no duplicate values.
    // Please write a function that accepts an input N. It should return the value at index N of the array.
    // For example [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...] n=10, return 22; n=100, return 447

    public static int findN(int n) {
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        queue.push(1);

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        Set<Integer> unique = new HashSet<>();

        while (!queue.isEmpty()) {
            int qn = queue.size();
            for (int i = 0; i < qn; i++) {
                int item = queue.poll();
                if ((pq.size() <= n || item < pq.peek()) && unique.add(item)) {
                    pq.add(item);
                    if (pq.size() > n + 1) {
                        pq.poll();
                    }
                    queue.offer(item * 2 + 1);
                    queue.offer(item * 3 + 1);
                }
            }

        }
        return pq.peek();
    }

    public static int findN2(int n) {
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        queue.push(1);

        List<Integer> list = new ArrayList<>();
        Set<Integer> unique = new HashSet<>();

        int ans = Integer.MAX_VALUE;
        while (!queue.isEmpty()) {
            int qn = queue.size();
            boolean added = false;

            for (int i = 0; i < qn; i++) {
                int item = queue.poll();
                if ((list.size() < n || item < ans) && unique.add(item)) {
                    list.add(item);
                    added = true;
                    queue.offer(item * 2 + 1);
                    queue.offer(item * 3 + 1);
                }
            }
            if (!added) {
                break;
            }
            Collections.sort(list);
            if (list.size() > n) {
                ans = list.get(n);
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int n = 100;
        long start = System.currentTimeMillis();
        int ans = findN(n);
        long end = System.currentTimeMillis();
        log.info("pq | n={}, ans={}, t={}", n, ans, (end - start));

        start = System.currentTimeMillis();
        ans = findN2(n);
        end = System.currentTimeMillis();
        log.info("list | n={}, ans={}, t={}", n, ans, (end - start));
    }
}
